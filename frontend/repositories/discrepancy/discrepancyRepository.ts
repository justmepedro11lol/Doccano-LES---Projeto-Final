// repositories/discrepancy/discrepancyRepository.ts

import ApiService from '@/services/api.service'
import type { DiscrepancyMessage } from '~/domain/models/example/discrepancy'

export interface DiscrepancyParams {
  status?: 'pending' | 'reviewing' | 'resolved' | 'ignored'
  discrepancy_type?: string
  priority?: number
  example?: number
  search?: string
  ordering?: string
  limit?: number
  offset?: number
}

export interface DetectDiscrepanciesResponse {
  message: string
  discrepancies: any[]
}

export interface DiscrepancyResolutionSuggestion {
  suggested_action: string
  confidence: number
  reasoning: string
  recommended_label?: any
}

export class APIDiscrepancyRepository {
  constructor(private request = ApiService) {}

  async list(projectId: string, params: DiscrepancyParams = {}): Promise<any[]> {
    console.log('üîç Buscando discrep√¢ncias para projeto:', projectId, 'com par√¢metros:', params)
    try {
      const response = await this.request.get(`/projects/${projectId}/discrepancies/`, { params })
      console.log('‚úÖ Discrep√¢ncias encontradas:', response.data)
      
      // A API pode retornar um array direto ou um objeto com results
      if (Array.isArray(response.data)) {
        return response.data
      }
      
      if (response.data?.results && Array.isArray(response.data.results)) {
        return response.data.results
      }
      
      return []
    } catch (error) {
      console.error('‚ùå Erro ao buscar discrep√¢ncias:', error)
      throw error
    }
  }

  async findById(projectId: string, discrepancyId: number): Promise<any> {
    console.log('üîç Buscando discrep√¢ncia por ID:', discrepancyId)
    try {
      const response = await this.request.get(`/projects/${projectId}/discrepancies/${discrepancyId}/`)
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao buscar discrep√¢ncia por ID:', error)
      throw error
    }
  }

  async create(projectId: string, discrepancyData: any): Promise<any> {
    console.log('üìù Criando nova discrep√¢ncia:', discrepancyData)
    try {
      const response = await this.request.post(`/projects/${projectId}/discrepancies/`, discrepancyData)
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao criar discrep√¢ncia:', error)
      throw error
    }
  }

  async update(projectId: string, discrepancyId: number, discrepancyData: any): Promise<any> {
    console.log('‚úèÔ∏è Atualizando discrep√¢ncia:', discrepancyId, discrepancyData)
    try {
      const response = await this.request.put(`/projects/${projectId}/discrepancies/${discrepancyId}/`, discrepancyData)
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao atualizar discrep√¢ncia:', error)
      throw error
    }
  }

  async delete(projectId: string, discrepancyId: number): Promise<void> {
    console.log('üóëÔ∏è Deletando discrep√¢ncia:', discrepancyId)
    try {
      await this.request.delete(`/projects/${projectId}/discrepancies/${discrepancyId}/`)
    } catch (error) {
      console.error('‚ùå Erro ao deletar discrep√¢ncia:', error)
      throw error
    }
  }

  async detectDiscrepancies(projectId: string): Promise<DetectDiscrepanciesResponse> {
    console.log('ü§ñ Detectando discrep√¢ncias automaticamente para projeto:', projectId)
    try {
      const response = await this.request.post(`/projects/${projectId}/discrepancies/detect/`)
      console.log('‚úÖ Resultado da detec√ß√£o autom√°tica:', response.data)
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao detectar discrep√¢ncias:', error)
      throw error
    }
  }

  async resolve(projectId: string, discrepancyId: number, resolutionNotes: string = ''): Promise<any> {
    console.log('‚úÖ Resolvendo discrep√¢ncia:', discrepancyId, 'com notas:', resolutionNotes)
    try {
      const response = await this.request.post(`/projects/${projectId}/discrepancies/${discrepancyId}/resolve/`, {
        resolution_notes: resolutionNotes
      })
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao resolver discrep√¢ncia:', error)
      throw error
    }
  }

  async suggestResolution(projectId: string, discrepancyId: number): Promise<DiscrepancyResolutionSuggestion> {
    console.log('üí° Buscando sugest√£o de resolu√ß√£o para discrep√¢ncia:', discrepancyId)
    try {
      const response = await this.request.get(`/projects/${projectId}/discrepancies/${discrepancyId}/suggest-resolution/`)
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao buscar sugest√£o de resolu√ß√£o:', error)
      throw error
    }
  }

  async addComment(projectId: string, discrepancyId: number, comment: string): Promise<any> {
    console.log('üí¨ Adicionando coment√°rio √† discrep√¢ncia:', discrepancyId, comment)
    try {
      const response = await this.request.post(`/projects/${projectId}/discrepancies/${discrepancyId}/comments/`, {
        comment
      })
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao adicionar coment√°rio:', error)
      throw error
    }
  }

  async getStatistics(projectId: string): Promise<any> {
    console.log('üìä Buscando estat√≠sticas de discrep√¢ncias para projeto:', projectId)
    try {
      const response = await this.request.get(`/projects/${projectId}/discrepancies/statistics/`)
      return response.data
    } catch (error) {
      console.error('‚ùå Erro ao buscar estat√≠sticas:', error)
      throw error
    }
  }

  // M√©todos legados para compatibilidade com chat
  async fetchMessages(projectId: string): Promise<DiscrepancyMessage[]> {
    console.log('üì® Buscando mensagens do chat para projectId:', projectId)
    try {
      const response = await this.request.get(`/projects/${projectId}/discrepancies/messages`)
      console.log('Resposta da API (tipo):', typeof response.data)
      console.log('Resposta da API (valor):', response.data)
      
      // A resposta j√° √© um array de mensagens
      if (Array.isArray(response.data)) {
        console.log('Total de mensagens encontradas:', response.data.length)
        return response.data
      }
      
      // Se n√£o for um array, verifica se tem a propriedade data
      const messages = response.data?.data
      if (Array.isArray(messages)) {
        console.log('Total de mensagens encontradas em data:', messages.length)
        return messages
      }
      
      console.log('Nenhuma mensagem encontrada')
      return []
    } catch (error) {
      console.error('‚ùå Erro ao buscar mensagens:', error)
      throw error
    }
  }

  postMessage(projectId: string, text: string) {
    console.log('üì§ Enviando mensagem para o chat do projectId:', projectId, 'text:', text)
    return this.request
      .post(`/projects/${projectId}/discrepancies/messages`, { text })
      .then(res => {
        console.log('‚úÖ Resposta da API (postMessage):', res.data)
        return res.data
      })
  }
}
