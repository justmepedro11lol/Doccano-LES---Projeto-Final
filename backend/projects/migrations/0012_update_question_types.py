# Generated by Django 4.2.15 on 2025-01-XX XX:XX

from django.db import migrations


def update_question_types(apps, schema_editor):
    QuestionType = apps.get_model('projects', 'QuestionType')
    
    # Atualizar tipos existentes
    try:
        # Atualizar tipo 1 de "Open Question" para "Text"
        qt1 = QuestionType.objects.get(id=1)
        qt1.question_type = 'Text'
        qt1.save()
    except QuestionType.DoesNotExist:
        # Criar se não existir
        QuestionType.objects.create(id=1, question_type='Text')
    
    try:
        # Atualizar tipo 2 de "Closed Question" para "Numeric"
        qt2 = QuestionType.objects.get(id=2)
        qt2.question_type = 'Numeric'
        qt2.save()
    except QuestionType.DoesNotExist:
        # Criar se não existir
        QuestionType.objects.create(id=2, question_type='Numeric')
    
    # Criar novo tipo "True/False"
    QuestionType.objects.get_or_create(id=3, defaults={'question_type': 'True/False'})


def reverse_update_question_types(apps, schema_editor):
    QuestionType = apps.get_model('projects', 'QuestionType')
    
    # Reverter para os tipos antigos
    try:
        qt1 = QuestionType.objects.get(id=1)
        qt1.question_type = 'Open Question'
        qt1.save()
    except QuestionType.DoesNotExist:
        pass
    
    try:
        qt2 = QuestionType.objects.get(id=2)
        qt2.question_type = 'Closed Question'
        qt2.save()
    except QuestionType.DoesNotExist:
        pass
    
    # Remover tipo "True/False"
    try:
        qt3 = QuestionType.objects.get(id=3)
        qt3.delete()
    except QuestionType.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0011_project_minpercentage'),
    ]

    operations = [
        migrations.RunPython(update_question_types, reverse_update_question_types),
    ] 